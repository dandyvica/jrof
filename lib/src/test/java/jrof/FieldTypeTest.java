/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import java.util.regex.PatternSyntaxException;
import java.lang.IllegalArgumentException;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.*;

import com.github.dandyvica.jrof.FieldClass;
import com.github.dandyvica.jrof.FieldType;
import jrof.test.Util;

@DisplayName("FieldType class tests")
class FieldTypeTest {

    @Test
    @DisplayName("constructor from XML fragment")
    void cons() throws Exception {
        var xml = "<fieldtype description='Alphanumerical field type' type='AN' class='string' pattern='.*' format='%-*.*s'/>";
        var e = Util.fromXML(xml);
        var ft = new FieldType(e);

        assertThat(ft.getName()).isEqualTo("");
        assertThat(ft.getDescription()).isEqualTo("Alphanumerical field type");
        assertThat(ft.getAlias()).isEqualTo("");
        assertThat(ft.getId()).isEqualTo("");
        assertThat(ft.getType()).isEqualTo("AN");
        assertThat(ft.getFieldClass()).isEqualTo(FieldClass.string);
        assertThat(ft.getPattern().pattern()).isEqualTo(".*");
    }

    @Test
    @DisplayName("copy constructor")
    void consCopy() throws Exception {
        var xml = "<fieldtype description='Alphanumerical field type' type='AN' class='string' pattern='.*' format='%-*.*s'/>";
        var e = Util.fromXML(xml);
        var ft = new FieldType(e);
        var copied = new FieldType(ft);

        assertThat(ft.getName()).isEqualTo("");
        assertThat(ft.getDescription()).isEqualTo("Alphanumerical field type");
        assertThat(ft.getAlias()).isEqualTo("");
        assertThat(ft.getId()).isEqualTo("");
        assertThat(ft.getType()).isEqualTo("AN");
        assertThat(ft.getFieldClass()).isEqualTo(FieldClass.string);
        assertThat(ft.getPattern().pattern()).isEqualTo(".*");
    }

    @Test
    @DisplayName("pattern match")
    void isMatch() throws Exception {
        // with no end attribute
        var xml = "<fieldtype type='N' class='integer' pattern='\\d+' />";
        var e = Util.fromXML(xml);
        var ft = new FieldType(e);

        assertThat(ft.isMatch("FOO")).isFalse();
        assertThat(ft.isMatch("123")).isTrue();
    }    

    @Test
    @DisplayName("wrong pattern throws exception")
    void wrongRegex() throws Exception {
        // with no end attribute
        var xml = "<fieldtype type='N' class='integer' pattern='(\\d+' />";
        var e = Util.fromXML(xml);

        // raise excp
        Throwable thrown = catchThrowable(() -> new FieldType(e));
        assertThat(thrown).isInstanceOf(PatternSyntaxException.class);
    }   
    
    @Test
    @DisplayName("wrong class, not present in enum")
    void wrongClass() throws Exception {
        // with no end attribute
        var xml = "<fieldtype type='N' class='matrix' />";
        var e = Util.fromXML(xml);

        // raise excp
        Throwable thrown = catchThrowable(() -> new FieldType(e));
        assertThat(thrown).isInstanceOf(IllegalArgumentException.class);
    }     

}
