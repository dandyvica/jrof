/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import java.util.regex.PatternSyntaxException;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.*;

import com.github.dandyvica.jrof.Field;
import jrof.test.Util;

@DisplayName("Field class tests")
class FieldTest {

    @Test
    @DisplayName("constructor from XML fragment")
    void cons() throws Exception {
        var xml = "<field id='1' name='FILL' description='Filler' start='10' length='3' type='AN'/>";
        var e = Util.fromXML(xml);
        var f = new Field(e);

        assertThat(f.getName()).isEqualTo("FILL");
        assertThat(f.getDescription()).isEqualTo("Filler");
        assertThat(f.getLength()).isEqualTo(3);
        assertThat(f.getStart()).isEqualTo(10);
        assertThat(f.getEnd()).isEqualTo(12);
        assertThat(f.getType()).isEqualTo("AN");
        assertThat(f.getId()).isEqualTo("1");
        assertThat(f.getDisplayLength()).isEqualTo(4);

        xml = "<field name='FILL' description='Filler' start='10' end='11' type='A' alias='SPARE'/>";
        e = Util.fromXML(xml);
        f = new Field(e);

        assertThat(f.getName()).isEqualTo("FILL");
        assertThat(f.getDescription()).isEqualTo("Filler");
        assertThat(f.getLength()).isEqualTo(2);
        assertThat(f.getStart()).isEqualTo(10);
        assertThat(f.getEnd()).isEqualTo(11);
        assertThat(f.getType()).isEqualTo("A");
        assertThat(f.getAlias()).isEqualTo("SPARE");
    }

    @Test
    @DisplayName("copy constructor")
    void copyCons() throws Exception {
        // with no end attribute
        var xml = "<field id='1' name='FILL' description='Filler' start='10' length='3' type='AN' alias='SPARE'/>";
        var e = Util.fromXML(xml);
        var f = new Field(e);
        var copied = new Field(f);

        assertThat(f.getName()).isEqualTo("FILL");
        assertThat(f.getDescription()).isEqualTo("Filler");
        assertThat(f.getLength()).isEqualTo(3);
        assertThat(f.getStart()).isEqualTo(10);
        assertThat(f.getEnd()).isEqualTo(12);
        assertThat(f.getType()).isEqualTo("AN");
        assertThat(f.getId()).isEqualTo("1");
        assertThat(f.getAlias()).isEqualTo("SPARE");
    }

    @Test
    @DisplayName("value")
    void value() throws Exception {
        // with no end attribute
        var xml = "<field name='FILL' description='Filler' start='10' length='3' type='AN'/>";
        var e = Util.fromXML(xml);
        var f = new Field(e);

        var s = "ABCDEFGHIJKLMOPQRSTUVWXYZ";
        f.setValue(s);

        assertThat(f.getValue()).isEqualTo("JKL");
    }

    @Test
    @DisplayName("pattern match")
    void isMatch() throws Exception {
        // with no end attribute
        var xml = "<field name='FILL' description='Filler' start='10' length='3' type='AN' pattern='\\d+'/>";
        var e = Util.fromXML(xml);
        var f = new Field(e);

        assertThat(f.isMatch("FOO")).isFalse();
        assertThat(f.isMatch("123")).isTrue();
    }

    @Test
    @DisplayName("integer attributes not integers")
    void wrongAttributes() throws Exception {
        // start is not an integer
        var xml = "<field name='FILL' description='Filler' start='xx' length='3' type='AN'/>";
        var e1 = Util.fromXML(xml);
        Throwable thrown = catchThrowable(() -> new Field(e1));
        assertThat(thrown).isInstanceOf(NumberFormatException.class);

        // length is not an integer
        xml = "<field name='FILL' description='Filler' start='5' length='xx' type='AN'/>";
        var e2 = Util.fromXML(xml);
        thrown = catchThrowable(() -> new Field(e2));
        assertThat(thrown).isInstanceOf(NumberFormatException.class);

        // end is not an integer
        xml = "<field name='FILL' description='Filler' start='5' end='xx' type='AN'/>";
        var e3 = Util.fromXML(xml);
        thrown = catchThrowable(() -> new Field(e3));
        assertThat(thrown).isInstanceOf(NumberFormatException.class);
    }    

    @Test
    @DisplayName("wrong pattern throws exception")
    void wrongRegex() throws Exception {
        // with no end attribute
        var xml = "<field name='FILL' description='Filler' start='10' length='3' type='AN' pattern='(\\d+'/>";
        var e = Util.fromXML(xml);

        // raise excp
        Throwable thrown = catchThrowable(() -> new Field(e));
        assertThat(thrown).isInstanceOf(PatternSyntaxException.class);
    }    
  
}
